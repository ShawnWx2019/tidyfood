run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
file_count = 9
round(c(min(file_count),median(file_count),max(file_count)))
round(1,3.4,2)
n = c(min(file_count),round(median(file_count)),max(file_count)))
round(median(file_count))
file_count
median(file_count)
n = c(min(1:file_count),round(median(1:file_count)),max(1:file_count)))
n = c(min(1:file_count),round(median(1:file_count)),max(1:file_count))
n
n = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
n
n = round(fivenum(1:file_count))
n
if(file_count == 1) {
file_select = 1
} else if(filenum == 3) {
file_select = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
} else if(filenum == 5) {
file_select = round(fivenum(1:file_count))
}
filenum
filenum = 18
if(file_count == 1) {
file_select = 1
} else if(filenum == 3) {
file_select = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
} else if(filenum == 5) {
file_select = round(fivenum(1:file_count))
}
file_select
if(file_count == 1) {
file_select = 1
} else if(filenum == 3) {
file_select = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
} else if(filenum == 5) {
file_select = round(fivenum(1:file_count))
}
file_select
round(fivenum(1:file_count))
filenum
filenum = 5
file_count = 100
if(file_count == 1) {
file_select = 1
} else if(filenum == 3) {
file_select = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
} else if(filenum == 5) {
file_select = round(fivenum(1:file_count))
} else {
file_select = 1:file_count
}
file_select
filenum = "all"
if(file_count == 1) {
file_select = 1
} else if(filenum == 3) {
file_select = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
} else if(filenum == 5) {
file_select = round(fivenum(1:file_count))
} else {
file_select = 1:file_count
}
file_select
availableCores
future::availableCores
paramounter_part1 = function(
directory,
massSDrange = 2,
smooth = 0,
cutoff = 0.95,
filenum = c(3,5,"all")
){
## init setting
filename <- list.files(path = directory,pattern = ".mzXML")
start_time <- Sys.time()
mzDiff <- c()
ppm <- c()
mzDiff2D <- as.data.frame(matrix(ncol = 3, nrow = 1))
colnames(mzDiff2D) <- c("mz", "rt", "mzdiff")
ppm2D <- as.data.frame(matrix(ncol = 3, nrow = 1))
colnames(ppm2D) <- c("mz", "rt", "ppm")
file_count = length(filename)
if(file_count == 1) {
file_select = 1
} else if(filenum == 3) {
file_select = round(c(min(1:file_count),median(1:file_count),max(1:file_count)))
} else if(filenum == 5) {
file_select = round(fivenum(1:file_count))
} else {
file_select = 1:file_count
}
#smoothing function
peak_smooth <- function(x,level=smooth){
n <- level
if(length(x) < 2*n){
return(x)
} else if(length(unique(x))==1){
return(x)
} else{
y <- vector(length=length(x))
for(i in 1:n){
y[i] <- sum(c((n-i+2):(n+1),n:1)*x[1:(i+n)])/sum(c((n-i+2):(n+1),n:1))
}
for(i in (n+1):(length(y)-n)){
y[i] <-  sum(c(1:(n+1),n:1)*x[(i-n):(i+n)])/sum(c(1:(n+1),n:1))
}
for(i in (length(y)-n+1):length(y)){
y[i] <- sum(c(1:n,(n+1):(n+i-length(x)+1))*x[(i-n):length(x)])/sum(c(1:n,(n+1):(n+i-length(x)+1)))
}
return(y)
}
}
#########################################################################################################
plan(multisession, workers = availableCores() - 1)
process_file <- function(q) {
# Parameter setting
ms1data <- readMSData(files = filename[q], mode = "onDisk", msLevel. = 1)
mzRange <- c(min(unlist(mz(ms1data))), max(unlist(mz(ms1data))))
ROI <- seq(mzRange[1], mzRange[2], 0.05)
mzData <- mz(ms1data)
intData <- intensity(ms1data)
rtime <- rtime(ms1data)
ppm2Ddist <- as.data.frame(matrix(ncol = 3, nrow = 1))
colnames(ppm2Ddist) <- c("mz", "rt", "ppm")
mzdiff2Ddist <- as.data.frame(matrix(ncol = 3, nrow = 1))
colnames(mzdiff2Ddist) <- c("mz", "rt", "mzdiff")
# ROI detection and universal parameter estimation
for(i in 1:(length(ROI) - 1)) {
# Obtain data lists in each m/z bin
currmzRange <- c(ROI[i], ROI[i+1])
tmpMZdata <- mzData
tmpINTdata <- intData
for(j in 1:length(mzData)){
index <- which(tmpMZdata[[j]] >= currmzRange[1] & tmpMZdata[[j]] < currmzRange[2])
tmpMZdata[[j]] <- tmpMZdata[[j]][index]
tmpINTdata[[j]] <- tmpINTdata[[j]][index]
}
# Extract the intensity vectors from each m/z bin
eicINTraw <- c()
eicINT <- c()
eicRT <- c()
for(k in 1:length(mzData)){
if(length(tmpINTdata[[k]]) > 0){
eicINTraw[k] <- mean(tmpINTdata[[k]])
}else{
eicINTraw[k] <- 0
}
eicRT[k] <- rtime[k]
}
if(sum(eicINTraw != 0) == 0) next()
# Sort the intensity vectors from each m/z bin, estimate the noise cut off and average
eicINT <- peak_smooth(eicINTraw)
eicNon0 <- sort(eicINT[eicINT > 0])
if(length(eicNon0) > 10){
for(x in seq(10,length(eicNon0), 10)){
sd <- sd(eicNon0[1:x])
blk <- sum(eicNon0[1:x])/x
thres <- blk + 3*sd
if(x+1 <= length(eicNon0)){
if(eicNon0[x+1] >= thres) break()
}
}
cutOFF <- eicNon0[x]
}else{
cutOFF <- max(eicNon0)
}
aboveTHindex <- which(eicINT > cutOFF)
if(length(aboveTHindex) == 0) next()
candidateSegInd <- split(aboveTHindex, cumsum(c(1, diff(aboveTHindex) != 1)))
peakInd <- c()
for(x in 1:length(candidateSegInd)){
peakInd[x] <- which(eicINT[candidateSegInd[[x]]] == max(eicINT[candidateSegInd[[x]]]))[1] + min(candidateSegInd[[x]]) - 1
}
refMZvec <- c()
for(y in 1:length(peakInd)){
highestINT <- which(tmpINTdata[[peakInd[y]]] == max(tmpINTdata[[peakInd[y]]]))[1]
refMZvec[y] <- tmpMZdata[[peakInd[y]]][highestINT]
}
# Estimate the universal parameters (mass tolerance, peak height, and peak width) for each m/z bin
ppmDiff <- c()
for(z in 1:length(peakInd)){
currPeakInd <- peakInd[z]
currRefMz <- refMZvec[z]
currSamePeakMass <- c()
currSamePeakMass <- c(currSamePeakMass, currRefMz)
leftInd <- currPeakInd-1
rightInd <- currPeakInd+1
if(leftInd > 0){
while (length(tmpMZdata[[leftInd]]) > 0 & mean(tmpINTdata[[leftInd]]) >= cutOFF) {
if (length(tmpMZdata[[leftInd]]) == 1){
currSamePeakMass <- c(currSamePeakMass, tmpMZdata[[leftInd]])
if(eicINT[leftInd] > eicINT[leftInd+1] & length(currSamePeakMass) > 5){
Q1 <- as.numeric(summary(currSamePeakMass)[2])
Q3 <- as.numeric(summary(currSamePeakMass)[5])
LB <- Q1 - 1.5 *(Q3 - Q1)
RB <- Q3 + 1.5 *(Q3 - Q1)
if (currSamePeakMass[length(currSamePeakMass)] < LB || currSamePeakMass[length(currSamePeakMass)] > RB) break()
}
} else {
abvector <- abs(tmpMZdata[[leftInd]] - currRefMz)
NearInd <- which(abvector == min(abvector))[1]
currSamePeakMass <- c(currSamePeakMass, tmpMZdata[[leftInd]][NearInd])
if(eicINT[leftInd] > eicINT[leftInd+1] & length(currSamePeakMass) > 5){
Q1 <- as.numeric(summary(currSamePeakMass)[2])
Q3 <- as.numeric(summary(currSamePeakMass)[5])
LB <- Q1 - 1.5 *(Q3 - Q1)
RB <- Q3 + 1.5 *(Q3 - Q1)
if (currSamePeakMass[length(currSamePeakMass)] < LB || currSamePeakMass[length(currSamePeakMass)] > RB) break()
}
}
leftInd <- leftInd-1
if(leftInd <= 0) break()
}
}
if(rightInd <= length(tmpMZdata)){
while (length(tmpMZdata[[rightInd]]) > 0 & mean(tmpINTdata[[rightInd]]) >= cutOFF) {
if (length(tmpMZdata[[rightInd]]) == 1){
currSamePeakMass <- c(currSamePeakMass, tmpMZdata[[rightInd]])
if(eicINT[rightInd] > eicINT[rightInd-1] & length(currSamePeakMass) > 5){
Q1 <- as.numeric(summary(currSamePeakMass)[2])
Q3 <- as.numeric(summary(currSamePeakMass)[5])
LB <- Q1 - 1.5 *(Q3 - Q1)
RB <- Q3 + 1.5 *(Q3 - Q1)
if (currSamePeakMass[length(currSamePeakMass)] < LB || currSamePeakMass[length(currSamePeakMass)] > RB) break()
}
} else {
abvector <- abs(tmpMZdata[[rightInd]] - currRefMz)
NearInd <- which(abvector == min(abvector))[1]
currSamePeakMass <- c(currSamePeakMass, tmpMZdata[[rightInd]][NearInd])
if(eicINT[rightInd] > eicINT[rightInd-1] & length(currSamePeakMass) > 5){
Q1 <- as.numeric(summary(currSamePeakMass)[2])
Q3 <- as.numeric(summary(currSamePeakMass)[5])
LB <- Q1 - 1.5 *(Q3 - Q1)
RB <- Q3 + 1.5 *(Q3 - Q1)
if (currSamePeakMass[length(currSamePeakMass)] < LB || currSamePeakMass[length(currSamePeakMass)] > RB) break()
}
}
rightInd <- rightInd+1
if(rightInd > length(tmpMZdata)) break()
}
}
if(length(currSamePeakMass) > 1){
ppmDiff[z] <- (massSDrange*sd(currSamePeakMass))/currRefMz * 1e6
ppm2Ddist <- rbind(ppm2Ddist, c(currRefMz, rtime[[peakInd[z]]], ppmDiff[z]))
}
}
}
return(ppm2Ddist)
}
results <- future_map(file_select, process_file,.progress = T)
# bind all results
ppm2D <- rbindlist(results)
ppm2D <- ppm2D[complete.cases(ppm2D),]
ppm2D <- ppm2D[order(ppm2D[,3]),]
ppm2D <- ppm2D[1:round(nrow(ppm2D)*0.97),]
ppm2D = as.data.frame(ppm2D)
ppm2Ddash <- ppm2D[1:round(nrow(ppm2D)*cutoff),]
dashline <- max(ppm2Ddash[,3])
p =
ggplot(ppm2D,aes(x = mz,y = ppm)) +
geom_point() +
geom_hline(yintercept = dashline, linetype = "dashed",color = 'red',
linewidth = 2)+
ylab("ppm")+
xlab("m/z")+
ggtitle(paste0("Mass tolerance"))+
annotate("text", x = Inf, y = Inf, label = paste0("Recommend ppmCut = ",round(dashline)), hjust = 1.1, vjust = 1.5)+
theme_bw()
print(Sys.time() - start_time)
message("Please find the cutoff line in the generated ppm distribution, and run Paramounter part 2 using the ppm cutoff")
data_export = list(
plot = p,
ppmCut = dashline
)
return(data_export)
}
devtools::document()
library(tidyfood)
# 绘制噪音水平的直方图
ggplot(data.frame(noise = noiselevel), aes(x = noise)) +
geom_histogram(breaks = seq(0, 500000000, 200), fill = "black") +
xlim(0, 10000) +
labs(x = "noise", y = "Frequency", title = "noise") +
theme(
plot.title = element_text(size = 20, hjust = 0.5),
axis.title = element_text(size = 17),
axis.text = element_text(size = 14)
)
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
devtools::document()
library(tidyfood)
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
devtools::document()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
devtools::document()
run_tidyfood_shiny()
paramounter_part1(directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/",cutoff = 3)
devtools::document()
library(tidyfood)
paramounter_part1(directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/",filenum = 3)
directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/"
massSDrange = 2
smooth = 0
cutoff = 0.95
filenum = 3
# filenum = match.arg(filenum)
## init setting
filename <- list.files(path = directory,pattern = ".mzXML")
filename
directory
directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/"
directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/"
paramounter_part1(directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/",filenum = 3)
devtools::document()
library(tidyfood)
paramounter_part1(directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/",filenum = 3)
devtools::document()
devtools::document()
library(tidyfood)
devtools::document()
library(tidyfood)
paramounter_part1(directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/",filenum = 3)
devtools::document()
library(tidyfood)
devtools::document()
library(tidyfood)
paramounter_part2(directory = '/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/',filenum = 3,ppmCut = 7)
devtools::document()
library(tidyfood)
paramounter_part2(directory = "/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/NEG/QC/",ppmCut = 7,filenum = 3)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
devtools::document()
library(tidyfood)
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
devtools::document()
run_tidyfood_shiny()
devtools::document()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
#> function
process_data_fun = function(path,polarity,parameters){
if(ncol(data_import_rv$parameters) == 3) {
n = 3
} else if(data_import_rv$parameters == 5) {
if(polarity == "positive") {n = 4} else if(polarity == "negative") {n = 5}
}
data_import_rv$ppm = as.numeric(data_import_rv$out_para_tbl[1,n])
data_import_rv$threads = as.numeric(data_import_rv$out_para_tbl[2,n])
data_import_rv$snthresh = as.numeric(data_import_rv$out_para_tbl[3,n])
data_import_rv$noise = as.numeric(data_import_rv$out_para_tbl[4,n])
data_import_rv$min_fraction =as.numeric(data_import_rv$out_para_tbl[5,n])
data_import_rv$p_min = as.numeric(data_import_rv$out_para_tbl[6,n])
data_import_rv$p_max = as.numeric(data_import_rv$out_para_tbl[7,n])
data_import_rv$pre_left = as.numeric(data_import_rv$out_para_tbl[8,n])
data_import_rv$pre_right = as.numeric(data_import_rv$out_para_tbl[9,n])
data_import_rv$fill_peaks = as.logical(data_import_rv$out_para_tbl[10,n])
data_import_rv$fitgauss = as.logical(data_import_rv$out_para_tbl[11,n])
data_import_rv$integrate = as.numeric(data_import_rv$out_para_tbl[12,n])
data_import_rv$mzdiff = as.numeric(data_import_rv$out_para_tbl[13,n])
data_import_rv$binSize = as.numeric(data_import_rv$out_para_tbl[14,n])
data_import_rv$bw = as.numeric(data_import_rv$out_para_tbl[15,n])
data_import_rv$out_put_peak = as.logical(data_import_rv$out_para_tbl[16,n])
data_import_rv$column = as.character(data_import_rv$out_para_tbl[17,n])
data_import_rv$ms1.ms2.match.rt.tol = as.numeric(data_import_rv$out_para_tbl[18,n])
data_import_rv$ms1.ms2.match.mz.tol = as.numeric(data_import_rv$out_para_tbl[19,n])
process_data(
path = path,
polarity = polarity,
ppm = data_import_rv$ppm,
peakwidth = c(data_import_rv$p_min, data_import_rv$p_max),
snthresh = data_import_rv$snthresh,
prefilter = c(data_import_rv$pre_left , data_import_rv$pre_right),
fitgauss = data_import_rv$fitgauss,
integrate = data_import_rv$integrate,
mzdiff = data_import_rv$mzdiff,
noise = data_import_rv$noise,
threads = data_import_rv$threads,
binSize = data_import_rv$binSize,
bw = data_import_rv$bw,
output_tic = data_import_rv$out_put_peak,
output_bpc = data_import_rv$out_put_peak,
output_rt_correction_plot = data_import_rv$out_put_peak,
min_fraction = data_import_rv$min_fraction,
fill_peaks = data_import_rv$fill_peaks,
group_for_figure = "QC"
)
}
#> function
process_data_fun = function(path,polarity,parameters){
if(ncol(data_import_rv$parameters) == 3) {
n = 3
} else if(data_import_rv$parameters == 5) {
if(polarity == "positive") {n = 4} else if(polarity == "negative") {n = 5}
}
data_import_rv$ppm = as.numeric(data_import_rv$out_para_tbl[1,n])
data_import_rv$threads = as.numeric(data_import_rv$out_para_tbl[2,n])
data_import_rv$snthresh = as.numeric(data_import_rv$out_para_tbl[3,n])
data_import_rv$noise = as.numeric(data_import_rv$out_para_tbl[4,n])
data_import_rv$min_fraction =as.numeric(data_import_rv$out_para_tbl[5,n])
data_import_rv$p_min = as.numeric(data_import_rv$out_para_tbl[6,n])
data_import_rv$p_max = as.numeric(data_import_rv$out_para_tbl[7,n])
data_import_rv$pre_left = as.numeric(data_import_rv$out_para_tbl[8,n])
data_import_rv$pre_right = as.numeric(data_import_rv$out_para_tbl[9,n])
data_import_rv$fill_peaks = as.logical(data_import_rv$out_para_tbl[10,n])
data_import_rv$fitgauss = as.logical(data_import_rv$out_para_tbl[11,n])
data_import_rv$integrate = as.numeric(data_import_rv$out_para_tbl[12,n])
data_import_rv$mzdiff = as.numeric(data_import_rv$out_para_tbl[13,n])
data_import_rv$binSize = as.numeric(data_import_rv$out_para_tbl[14,n])
data_import_rv$bw = as.numeric(data_import_rv$out_para_tbl[15,n])
data_import_rv$out_put_peak = as.logical(data_import_rv$out_para_tbl[16,n])
data_import_rv$column = as.character(data_import_rv$out_para_tbl[17,n])
data_import_rv$ms1.ms2.match.rt.tol = as.numeric(data_import_rv$out_para_tbl[18,n])
data_import_rv$ms1.ms2.match.mz.tol = as.numeric(data_import_rv$out_para_tbl[19,n])
process_data(
path = path,
polarity = polarity,
ppm = data_import_rv$ppm,
peakwidth = c(data_import_rv$p_min, data_import_rv$p_max),
snthresh = data_import_rv$snthresh,
prefilter = c(data_import_rv$pre_left , data_import_rv$pre_right),
fitgauss = data_import_rv$fitgauss,
integrate = data_import_rv$integrate,
mzdiff = data_import_rv$mzdiff,
noise = data_import_rv$noise,
threads = data_import_rv$threads,
binSize = data_import_rv$binSize,
bw = data_import_rv$bw,
output_tic = data_import_rv$out_put_peak,
output_bpc = data_import_rv$out_put_peak,
output_rt_correction_plot = data_import_rv$out_put_peak,
min_fraction = data_import_rv$min_fraction,
fill_peaks = data_import_rv$fill_peaks,
group_for_figure = "QC"
)
}
devtools::document()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
load("/Volumes/ShawnWang/03.yk/HRMS-raw/MS1/POS/Result/intermediate_data/massprocesser_parameters")
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::install_github("tidymass/massconverter")
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
