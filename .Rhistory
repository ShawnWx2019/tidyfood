card_header(
"Negative model"
),
verbatimTextOutput(ns("res_neg_mod"))
)
)
)
}
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
library(tidyfood)
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
run_tidyfood_shiny()
install.packages("shinytest")
shinytest::recordTest()
# Create an app.R file at the root of the package
golem::add_rstudioconnect_file()
# Launch a test, and record a series of
# snapshots of your application
shinytest::recordTest()
# Create an app.R file at the root of the package
golem::add_rstudioconnect_file()
# Launch a test, and record a series of
# snapshots of your application
shinytest::recordTest()
rlang::last_trace()
# Create an app.R file at the root of the package
golem::add_rstudioconnect_file()
# Launch a test, and record a series of
# snapshots of your application
shinytest::recordTest()
rlang::last_trace()
shinytest::recordTest()
shinytest::installDependencies()
shinytest::installDependencies()
shinytest::recordTest()
shinytest::testApp()
shinytest::recordTest()
rlang::last_trace()
devtools::document()
library(tidyfood)
devtools::document()
rlang::last_trace()
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
library(tidyfood)
run_tidyfood_shiny()
library(tidyverse)
library(tidymass)
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
library(tidyfood)
library(tidyverse)
library(tidymass)
library(MDAtoolkits)
run_tidyfood_shiny()
devtools::document()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
run_tidyfood_shiny()
devtools::document()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
load("/Volumes/TOSHIBA/01.Demo/Result/NEG/Objects/step1/object_neg_raw.rda")
object_neg_raw@sample_info_note
object_neg_raw@variable_info_note
library(MDAtoolkits)
library(tidymass)
object_neg_raw_mona <-
object_neg_raw %>%
annotate_metabolites_mass_dataset(
ms1.match.ppm = 10,
ms2.match.ppm = 30,
polarity = "negative",
threads = 6,
database = mona_database0.0.4
)
ms2_match_only = object_neg_raw@ms2_data$`QC_01.mgf;QC_02.mgf;QC_03.mgf;QC_04.mgf;QC_05.mgf;QC_06.mgf;S_01.mgf;S_02.mgf;S_03.mgf;S_04.mgf`@variable_id
ms2_match_only
object_neg_raw_ms2_only <-
object_neg_raw %>%
activate_mass_dataset('variable_id') %>%
left_join(
data.frame(
variable_id = ms2_match_only,
tag = "keep"
)
) %>%
dplyr::filter(tag == "keep")
object_neg_raw_ms2_only <-
object_neg_raw %>%
activate_mass_dataset('variable_info') %>%
left_join(
data.frame(
variable_id = ms2_match_only,
tag = "keep"
)
) %>%
dplyr::filter(tag == "keep")
object_neg_ms2_only_mona <-
object_neg_raw_ms2_only %>%
annotate_metabolites_mass_dataset(
ms1.match.ppm = 10,
ms2.match.ppm = 30,
polarity = "negative",
threads = 6,
database = mona_database0.0.4
)
setdiff(
object_neg_raw_mona %>% extract_annotation_table() %>% pull(variable_id) %>% unique(),
object_neg_ms2_only_mona %>% extract_annotation_table() %>% pull(variable_id) %>% unique()
)
object_neg_raw_mona %>% extract_annotation_table() %>% pull(variable_id) %>% unique()
object_neg_ms2_only_mona %>% extract_annotation_table() %>% pull(variable_id) %>% unique()
object_neg_ms2_only_mona
object_neg_raw_mona
object_neg_raw_mona %>% extract_annotation_table()
object_neg_raw_mona %>% extract_annotation_table() %>% nrow()
object_neg_ms2_only_mona %>% extract_annotation_table() %>% norm()
object_neg_ms2_only_mona %>% extract_annotation_table()
object_neg_ms2_only_mona %>% extract_annotation_table() %>% norm()
object_neg_raw_mona %>% extract_annotation_table() %>% nrow()
object_neg_ms2_only_mona
object_neg_ms2_only_mona %>% extract_annotation_table()
object_neg_raw_mona %>% extract_annotation_table() %>% nrow()
object_neg_ms2_only_mona %>% extract_annotation_table() %>% norm()
object_neg_ms2_only_mona
object_neg_ms2_only_mona
object_neg_raw_mona
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
run_tidyfood_shiny()
raw_expmat <- read.csv("/Volumes/数据传输/00.waters/exp_mat.csv")
library(tidyverse)
sample_info <- read.csv("/Volumes/数据传输/00.waters/sample_info3.csv")
temp_batch1_s <- sample_info %>% filter(batch == 1)
temp_batch1_s
temp_batch2_s <- sample_info %>% filter(batch == 2)
View(temp_batch1_s)
temp_batch2_ex <- raw_expmat %>% select(temp_batch1_s$sample_id)
temp_batch1_ex <- raw_expmat %>% select(temp_batch1_s$sample_id)
temp_batch2_ex <- raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch2_ex
temp_batch2_qc = temp_batch2_ex %>% select(contains("QC"))
temp_batch2_qc
raw_expmat <- read.csv("/Volumes/数据传输/00.waters/exp_mat.csv")
sample_info <- read.csv("/Volumes/数据传输/00.waters/sample_info3.csv")
temp_batch1_s <-
sample_info %>% filter(batch == 1)
temp_batch2_s <-
sample_info %>% filter(batch == 2)
temp_batch1_ex <-
raw_expmat %>% select(temp_batch1_s$sample_id)
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id) %>%
* 10
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id) %>%
`*` (10)
temp_batch2_ex*10
temp_batch2_s <-
sample_info %>% filter(batch == 3)
temp_batch1_ex <-
raw_expmat %>% select(temp_batch1_s$sample_id)
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch2_ex*10
temp_batch2_ex <- temp_batch2_ex * 30
temp_batch3_s <-
sample_info %>% filter(batch == 3)
temp_batch1_ex <-
raw_expmat %>% select(temp_batch1_s$sample_id)
temp_batch3_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch3_ex <- temp_batch2_ex * 30
temp_batch2_s <-
sample_info %>% filter(batch == 2)
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch3_ex <-
raw_expmat %>% select(temp_batch3_s$sample_id)
temp_batch3_ex <- temp_batch3_ex * 30
temp_batch2_ex <- temp_batch2_ex * 20
temp_expmat <- cbind(temp_batch1_ex,temp_batch2_ex,temp_batch3_ex)
temp_expmat <- cbind(raw_expmat[,1:4],temp_batch1_ex,temp_batch2_ex,temp_batch3_ex)
write.csv("/Volumes/数据传输/00.waters/exp_mat2.csv")
write.csv(temp_expmat,"/Volumes/数据传输/00.waters/exp_mat2.csv")
write.csv(temp_expmat,"/Volumes/数据传输/00.waters/exp_mat2.csv",row.names = F)
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch3_ex <-
raw_expmat %>% select(temp_batch3_s$sample_id)
temp_batch2_ex <- temp_batch2_ex / 20
temp_batch3_ex <- temp_batch3_ex / 30
temp_expmat <- cbind(raw_expmat[,1:4],temp_batch1_ex,temp_batch2_ex,temp_batch3_ex)
write.csv(temp_expmat,"/Volumes/数据传输/00.waters/exp_mat2.csv",row.names = F)
temp_batch2_ex <- temp_batch2_ex / 100
temp_batch3_ex <- temp_batch3_ex / 150
temp_batch2_ex <-
raw_expmat %>% select(temp_batch2_s$sample_id)
temp_batch3_ex <-
raw_expmat %>% select(temp_batch3_s$sample_id)
temp_batch2_ex <- temp_batch2_ex / 100
temp_batch3_ex <- temp_batch3_ex / 150
temp_expmat <- cbind(raw_expmat[,1:4],temp_batch1_ex,temp_batch2_ex,temp_batch3_ex)
write.csv(temp_expmat,"/Volumes/数据传输/00.waters/exp_mat2.csv",row.names = F)
getwd()
setwd("~/Downloads/")
lipidblast_database <- construct_mona_database(
file = "MoNA-export-LipidBlast_2022.msp",
path = ".",
version = "0.0.1",
source = "MoNA",
link = "https://mona.fiehnlab.ucdavis.edu/",
creater = "Shawn Wang",
email = "shawnwang2016@126.com",
rt = FALSE,
threads = 5
)
library(metID)
library(metid)
lipidblast_database <- construct_mona_database(
file = "MoNA-export-LipidBlast_2022.msp",
path = ".",
version = "0.0.1",
source = "MoNA",
link = "https://mona.fiehnlab.ucdavis.edu/",
creater = "Shawn Wang",
email = "shawnwang2016@126.com",
rt = FALSE,
threads = 5
)
lipidblast_database <- construct_mona_database(
file = "MoNA-export-LipidBlast.msp",
path = ".",
version = "0.0.1",
source = "MoNA",
link = "https://mona.fiehnlab.ucdavis.edu/",
creater = "Shawn Wang",
email = "shawnwang2016@126.com",
rt = FALSE,
threads = 5
)
=3/5
3/5
library(MetMiner)
library(MDAtoolkits)
construct_mona_database2 = function(
file, only.remain.ms2 = TRUE, path = ".", version = "0.0.1",
source = "MoNA", link = "https://mona.fiehnlab.ucdavis.edu/",
creater = "Xiaotao Shen", email = "shenxt1990@163.com", rt = FALSE,
threads = 5
) {
mona_database = read_msp_mona(file = file)
#> Issue1: set rownames of mona_database[[i]]$info
mona_database = purrr::map(mona_database,function(x){
x$info = data.frame(
row.names = x$info$info,
value = x$info$value
)
db = list(info = x$info,
spec = x$spec)
return(db)
})
all_metabolite_names = purrr::map(mona_database, function(x) {
rownames(x$info)
}) %>% unlist() %>% unique()
metabolite_info = mona_database %>% purrr::map(function(x) {
x = as.data.frame(x$info)
new_x = x[, 1]
names(new_x) = rownames(x)
new_x = new_x[all_metabolite_names]
names(new_x) = all_metabolite_names
new_x
}) %>% do.call(rbind, .) %>% as.data.frame()
colnames(metabolite_info) = all_metabolite_names
if (only.remain.ms2) {
remain_idx = which(metabolite_info$Spectrum_type == "MS2")
metabolite_info = metabolite_info[remain_idx, ]
mona_database = mona_database[remain_idx]
}
metabolite_info =
metabolite_info %>%
dplyr::select(
Compound.name = Name,
mz = ExactMass, Formula,
MoNA.ID = `DB#`,
dplyr::everything()
)
metabolite_info =
metabolite_info %>%
dplyr::mutate(
Lab.ID = paste("MoNA", seq_len(nrow(metabolite_info)), sep = "_"),
RT = NA,
CAS.ID = NA,
HMDB.ID = NA,
KEGG.ID = NA,
mz.pos = NA,
mz.neg = NA,
Submitter = "MoNA",
Family = NA,
Sub.pathway = NA,
Note = NA) %>%
dplyr::select(
Lab.ID,
Compound.name,
mz,
RT,
CAS.ID,
HMDB.ID,
KEGG.ID,
Formula,
mz.pos,
mz.neg,
Submitter,
Family,
Sub.pathway,
Note,
dplyr::everything()
)
#> Issue2: Collision_energy
if(!"Collision_energy"%in%colnames(metabolite_info)) {
metabolite_info$Collision_energy = NA
}
metabolite_info$Collision_energy[is.na(metabolite_info$Collision_energy)] = "not_available"
metabolite_info$Collision_energy[metabolite_info$Collision_energy == ""] = "not_available"
#> Issue3: Ion_mode
metabolite_info =
metabolite_info %>%
mutate(Ion_mode =
case_when(
str_detect(Ion_mode,regex("P",ignore_case = T)) ~ "P",
str_detect(Ion_mode,regex("N",ignore_case = T)) ~ "N"
)
)
positive_idx = which(metabolite_info$Ion_mode == "P")
negative_idx = which(metabolite_info$Ion_mode == "N")
Spectra.positive = mona_database[positive_idx]
Spectra.negative = mona_database[negative_idx]
names(Spectra.positive) = metabolite_info$Lab.ID[positive_idx]
names(Spectra.negative) = metabolite_info$Lab.ID[negative_idx]
Spectra.positive = purrr::map2(.x = Spectra.positive, .y = metabolite_info$Collision_energy[positive_idx],
.f = function(x, y) {
x = x$spec
x = list(x)
names(x) = y
x
})
Spectra.negative = purrr::map2(.x = Spectra.negative, .y = metabolite_info$Collision_energy[negative_idx],
.f = function(x, y) {
x = x$spec
x = list(x)
names(x) = y
x
})
database.info <- list(Version = version, Source = source,
Link = link, Creater = creater, Email = email, RT = rt)
spectra.info <- as.data.frame(metabolite_info)
rm(list = "metabolite_info")
Spectra <- list(Spectra.positive = Spectra.positive, Spectra.negative = Spectra.negative)
database <- new(Class = "databaseClass", database.info = database.info,
spectra.info = spectra.info, spectra.data = Spectra)
database@database.info$RT <- ifelse(all(is.na(database@spectra.info$RT)),
FALSE, TRUE)
message(crayon::bgRed("All done!\n"))
return(database)
}
lipidblast_database <- construct_mona_database2(
file = "MoNA-export-LipidBlast.msp",
path = ".",
version = "0.0.1",
source = "MoNA",
link = "https://mona.fiehnlab.ucdavis.edu/",
creater = "Shawn Wang",
email = "shawnwang2016@126.com",
rt = FALSE,
threads = 5
)
library(massdatabase)
lipidblast_database <-
massdatabase::convert_mona2metid(data = "MoNA-export-LipidBlast_2022.msp",path = ".",threads = 7)
data <-
massdatabase::read_msp_data("MoNA-export-LipidBlast_2022.msp", source = "mona")
lipidblast_database <-
massdatabase::convert_mona2metid(data = data,path = ".",threads = 7)
library(massdatabase)
setwd("~/Downloads/")
data <-
massdatabase::read_msp_data("MoNA-export-LipidBlast.msp", source = "mona")
library(massdatabase)
setwd("~/Downloads/")
data <-
massdatabase::read_msp_data("MoNA-export-LipidBlast.msp", source = "mona")
library(massdatabase)
setwd("~/Downloads/")
data <-
massdatabase::read_msp_data("MoNA-export-LipidBlast.msp", source = "mona",threads = 7)
data[1:10]
massdatabase::convert_mona2metid(data = data[1:100], path = ".", threads = 7)
lipidblast <- massdatabase::convert_mona2metid(data = data[1:100], path = ".", threads = 7)
lipidblast
lipidblast@database.info
lipidblast@spectra.info
lipidblast <- massdatabase::convert_mona2metid(data = data, path = ".", threads = 7)
lipidblast
lipidblast_v1 <- lipidblast
save(lipidblast_v1,file = "lipidblast.rda")
load("/Volumes/ShawnWang/0729/Result/POS/Objects/step1/object_pos_norm.rda")
object_pos_norm
library(tidymass)
rm(lipidblast)
lipidblast_v1@spectra.info$mz
lipidblast_v1@spectra.info$mz %>% min()
max(object_pos_norm@variable_info$mz)
x =
metid::annotate_metabolites_mass_dataset(
object = object_pos_norm,polarity = "positive"
)
x =
metid::annotate_metabolites_mass_dataset(
object = object_pos_norm,polarity = "positive",
database = lipidblast_v1
)
x@annotation_table
x@variable_info
library(MDAtoolkits)
x =
metid::annotate_metabolites_mass_dataset(
object = object_pos_norm,polarity = "positive",
database = lipidblast_v1,threads = 7,ms1.match.ppm = 100,ms2.match.ppm = 100,mz.ppm.thr = 100,
total.score.tol = 0.2
)
x@annotation_table
x =
metid::annotate_metabolites_mass_dataset(
object = object_pos_norm,polarity = "positive",
database = mona_database0.0.4,threads = 7,ms1.match.ppm = 100,ms2.match.ppm = 100,mz.ppm.thr = 100,
total.score.tol = 0.2
)
x@annotation_table
x@annotation_table %>% group_by(variable_id) %>% slice_head(n = 1)
x@annotation_table %>% group_by(variable_id) %>% slice_head(n = 1) %>% pull(Compound.name) %>% unique()
x =
metid::annotate_metabolites_mass_dataset(
object = object_pos_norm,polarity = "positive",
database = orbitrap_database0.0.3,threads = 7,ms1.match.ppm = 100,ms2.match.ppm = 100,mz.ppm.thr = 100,
total.score.tol = 0.2
)
x@annotation_table %>% group_by(variable_id) %>% slice_head(n = 1) %>% pull(Compound.name) %>% unique()
tidyfood::run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
devtools::document()
library(tidyfood)
run_tidyfood_shiny()
